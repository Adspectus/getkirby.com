Title: Login methods
----
Intro: There are now three ways to get into the Panel that can be configured with the `auth.methods` option
----
Text:

## Available methods

1. **Password (`password`)**
The user gets a login form with email and password fields. This method is enabled by default.

2. **Passwordless login (`code`)**
Here, the login form only has an email field. Instead of logging in with the user's password, the user gets asked for a login code that is sent via email by default or can be generated by plugins. You might know this way of logging in from services like Notion or from our [feedback site](https://feedback.getkirby.com).

3. **Password reset (`password-reset`)**
This method is very similar to the passwordless login, but the purpose is different: After logging in with the code, the user will be redirected to the password reset form. After confirming the new password, the user is redirected to the Panel dashboard.

<info>
All login methods except the default `password` method need a working email transport configuration. Otherwise verification emails cannot be sent. Find out more about **(link: /docs/reference/system/options/email#email-transport text: how to configure your email transport)**.
</info>


## Login via code

If you want to prevent login via password completely, you can set the login methods option to `code`. The default login via password will be disabled.

```php "/site/config/config.php"
<?php

return [
    'auth' => [
        'methods' => 'code'
    ]
];
```

(screenshot: login.png)

## Login via code & login via password

You can also combine login via code and login via password. The `password-reset` method is then no longer available.

**The first method in the array will be the default login method.**

```php "/site/config/config.php"
<?php

return [
    'auth' => [
        'methods' => ['code', 'password']
    ]
];
```

(screenshot: email-and-password.png)


## Password reset

To enable the password reset form, you can combine the default `password` login method with the `password-reset` method:

```php "/site/config/config.php"
<?php

return [
    'auth' => [
        'methods' => ['password', 'password-reset']
    ]
];
```

(screenshot: password-reset.png)

## Two-step or two-factor authentication

To enable two-step/two-factor authentication for your logins, you can pass the `2fa` option to the `password` method in an array.

The default `2fa` mode will ask users for their email and password first and then send a verification email with an additional code that they have to enter afterwards to verify their login.

This is a two-step authentication as it relies on the password to the email account being secure. If you want even more security, you can use (link: v35/authentication/auth-challenge-plugins text: Auth Challenge Plugins) for challenges like TOTP, SMS or hardware tokens. The login flow is the same, but the additional login code then gets verified by the plugin.

Two-factor/two-step authentication is *not* compatible with the `code` or `password-reset` options as logging in via just a code would circumvent the added `2fa` security.

```php
<?php

return [
    'auth' => [
        'methods' => [
            'password' => ['2fa' => true]
        ]
    ]
];
```

(screenshot: 2fa.png)

## Additional configuration options

### `auth.challenge.timeout`

The timeout controls how long a generated login code is valid. The default is 10 minutes.

```php
<?php

return [
    'auth' => [
        'methods'   => ['code', 'password'],
        'challenge' => [
            'timeout' => 5 * 60 // 5 minutes
        ]
    ]
];
```

### `auth.challenge.email.*`

You can customize the sender and the subject of the code emails:

```php
<?php

return [
    'auth' => [
        'methods'   => ['code', 'password'],
        'challenge' => [
            'timeout' => 5 * 60 // 5 minutes,
            'email' => [
                'from'     => 'mail@example.com',
                'fromName' => 'My example project',
                'subject'  => 'Login code'
            ]
        ]
    ]
];
```

## Email Templates

You can overwrite our standard email templates for code verification and password reset by placing the following email templates in `/site/templates/emails/auth`:

### Login via code

**HTML template:**
`/site/templates/emails/auth/login.html.php`

**Text template:**
`/site/templates/emails/auth/login.php`

**Default email text:**
```txt "Subject: Your login code"
Hi {user.nameOrEmail},

You recently requested a login code for the Kirby Panel.
The following login code will be valid for {timeout} minutes:

{code}

If you did not request a login code, please ignore this email or contact your administrator if you have questions.
For security, please DO NOT forward this email.
```

### Password reset

**HTML template:**
`/site/templates/emails/auth/login.html.php`

**Text template:**
`/site/templates/emails/auth/login.php`

**Default email text:**
```txt "Subject: Your password reset code"
Hi {user.nameOrEmail},

You recently requested a password reset code for the Kirby Panel.
The following password reset code will be valid for {timeout} minutes:

{code}

If you did not request a password reset code, please ignore this email or contact your administrator if you have questions.
For security, please DO NOT forward this email.
```
