Title: Layout Field
----
Intro: In addition to the blocks field we also have a new layout field for complex block layouts in multiple columns.
----
Text:

(screenshot: layout.png)

## Getting started

By default the layout field comes with a single 1-column layout and all the default fieldsets from the Blocks field.

```yaml
fields:
  layout:
    type: layout
```

## Defining your own layouts

Defining available layouts is simple: each layout is list of column widths. i.e. `1/2, 1/2` or `1/4, 3/4` â€¦

```yaml
fields:
  layout:
    type: layout
    layouts:
      - "1/1"
      - "1/2, 1/2"
      - "1/4, 1/4, 1/4, 1/4"
      - "1/3, 2/3"
      - "2/3, 1/3"
      - "1/3, 1/3, 1/3"
```

Those layouts will then show up in the layout selector when an editor creates a new row:

(screenshot: selector.png)

## Fieldsets

The layout field also accepts the `fieldsets` option from the blocks field to control blocks in columns.

The fieldsets setup is exactly the same. You can follow the instructions from the (link: ./blocks/block-selector text: Blocks field).

```yaml
fields:
  layout:
    type: layout
    layouts:
      - "1/1"
      - "1/2, 1/2"
      - "1/4, 1/4, 1/4, 1/4"
      - "1/3, 2/3"
      - "2/3, 1/3"
      - "1/3, 1/3, 1/3"
    fieldsets:
      - heading
      - text
      - image
```

## Layout settings

It's often useful to set additional class names, IDs or even something like background colors and images for layout sections. This can be achieved with layout settings.

Layout settings are defined globally. Each layout will then get a "Settings" button in its dropdown and open a settings drawer with the configured fields.

```yaml
fields:
  layout:
    type: layout
    layouts:
      - "1/1"
      - "1/2, 1/2"
      - "1/4, 1/4, 1/4, 1/4"
      - "1/3, 2/3"
      - "2/3, 1/3"
      - "1/3, 1/3, 1/3"
    fieldsets:
      - heading
      - text
      - image
    settings:
      fields:
        class:
          type: text
          width: 1/2
        id:
          type: text
          width: 1/2
        image:
          label: Background image
          type: files
```

(screenshot: layout-settings.png)

## How to render layouts in your templates

There's a new `toLayouts` field method, which you can use to get a structured collection of layout objects to create your HTML.

```php
<?php foreach ($page->layout()->toLayouts() as $layout): ?>
<section class="grid" id="<?= $layout->id() ?>">
  <?php foreach ($layout->columns() as $column): ?>
  <div class="column" style="--span:<?= $column->span() ?>">
    <div class="blocks">
      <?= $column->blocks() ?>
    </div>
  </div>
  <?php endforeach ?>
</section>
<?php endforeach ?>
```

## Calculate the column span value

Each column in a layout as a `$column->width()` method which will return the width defined in the blueprint. (i.e. `1/2`) but for many grid systems you need to know how many columns the current column should span in the grid. This can be done with the `$column->span()` method. The method calculates with a 12-column grid by default. So for example, if your column width is `1/2` the span method would return a value of 6. If you are working with a different kind of grid system you can pass the number of columns like this: `$column->span(6)`:

```php
<?php foreach ($page->layout()->toLayouts() as $layout): ?>
<section class="6-column-grid" id="<?= $layout->id() ?>">
  <?php foreach ($layout->columns() as $column): ?>
  <div class="column" style="--span:<?= $column->span(6) ?>">
    <div class="blocks">
      <?= $column->blocks() ?>
    </div>
  </div>
  <?php endforeach ?>
</section>
<?php endforeach ?>
```

## Working with individual blocks

In some cases, you might even want to controll the way blocks within layouts are rendered. `$column->blocks()` will return a blocks collection that you can work with and create another nested foreach loop.

```php
<?php foreach ($page->layout()->toLayouts() as $layout): ?>
<section class="6-column-grid" id="<?= $layout->id() ?>">
  <?php foreach ($layout->columns() as $column): ?>
  <div class="column" style="--span:<?= $column->span(6) ?>">
    <div class="blocks">
      <?php foreach ($column->blocks() as $block): ?>
      <div class="block block-type-<?= $block->type() ?>">
        <?= $block ?>
      </div>
      <?php endforeach ?>
    </div>
  </div>
  <?php endforeach ?>
</section>
<?php endforeach ?>
```

Check out the (link: ./blocks/templating text: templating) section in the Blocks field docs for more options to work with individual blocks.
