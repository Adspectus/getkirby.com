Title: Templating

----

Intro: The Blocks field offers full control over the rendered HTML

----

Text:

## Block snippets

The HTML for each individual block is stored in its own block snippet. All our default block types bring their own snippets and can be overwritten. Block snippets are stored in `/site/snippets/blocks`

As an example, if you want to overwrite the snippet for our `heading` block, you would create a snippet file called `/site/snippets/blocks/heading.php`

## Block collection

All blocks are part of a blocks collection. It follows the regular stuff you can do with collections in Kirby (filtering, sorting, limiting, etc.). But the nicest part is that you can now turn the entire list of blocks into HTML by simply echoing it

```php
<?= $page->myBlocksField()->toBlocks() ?>
```

Of course it's still possible to use a foreach loop instead:

```php
<?php foreach ($page->myBlocksField()->toBlocks() as $block): ?>
<?= $block ?>
<?php endforeach ?>
```

or the good old version by manually loading snippets

```php
<?php foreach ($page->myBlocksField()->toBlocks() as $block): ?>
<?php snippet('blocks/' . $block->type(), ['block' => $block]) ?>
<?php endforeach ?>
```

if you want to keep the `$data` variable of the Builder field instead of `$block` this is of course possible as well.

```php
<?php foreach ($page->myBlocksField()->toBlocks() as $block): ?>
<?php snippet('blocks/' . $block->type(), ['data' => $block]) ?>
<?php endforeach ?>
```

Rendering the block by converting it to a string will automatically pass `$block` and `$data` to the snippet for enhanced compatibility with the plugin

## Block objects

Every item in the Blocks collection is a Block object. Block objects have the following methods:

#### `$block->__toString()`
You can render a block by simply echoing it / converting it to a string
```php
<?= $block ?>
```

#### `$block->content()`
Returns the content object with all block fields.

#### `$block->hasNext()`
Checks if there's a next block

#### `$block->hasPrev()`
Checks if there's a previous block

#### `$block->id()`
Returns the block id. Block IDs are now created in the universal UUID v4 format.

#### `$block->indexOf()`
Returns the index of the block in the siblings collection

#### `$block->is($anotherBlock)`
Compares the block to another one*

#### `$block->isEmpty()`
Checks if the block is empty

#### `$block->isFirst()`
Checks if this is the first block

#### `$block->isHidden()`
Checks if the block has been hidden by the editor

#### `$block->isLast()`
Checks if this is the last block

#### `$block->isNotEmpty()`
Checks if the block has some content

#### `$block->isNth($index)`
Checks if this block is at the current index

#### `$block->kirby()`
Returns the Kirby instance

#### `$block->next()`
Returns the next block object

#### `$block->nextAll()`
Returns all block objects that follow after this block as a Blocks collection

#### `$block->parent()`
Returns the parent model (site, page, file, user)

#### `$block->prev()`
Returns the previous block object

#### `$block->prevAll()`
Returns all block objects that come before this block as a Blocks collection

#### `$block->siblings()`
Returns a collection with all sibling blocks

#### `$block->snippet()`
Returns the name / path to the snippet, which will be used to render the block

#### `$block->toArray()`
Turns the block data to an associative array

#### `$block->toField()`
Converts the block* *to html first and then places that inside a field object. This can be used further with all available field methods

#### `$block->toHtml()`
Converts the block to HTML with the matching snippet

#### `$block->type()`
Returns the block type, which is defined by the key of your fieldset definition.
