Title: Custom blocks

----

Intro: You can create your own Block types for the Blocks field in the same way you might already know from the famous Builder plugin. In fact, the Blocks field is our effort to embed the functionality of the Builder into the core of Kirby.

----

Text:


Custom blocks can be defined directly in the fieldsets list:

```yaml
fields:
  blocks:
    type: blocks
    fieldsets:
      - heading
      - text
      button:
        name: Button
        icon: bolt
        fields:
          link:
            type: url
          text:
            type: text
```

In the example above, we mix the unchanged default block types (heading and text) with our own custom block type to add a call to action button

## Preview

Custom block types don't have a visual preview by default. They show up with the icon and the name from your blueprint definition.

(screenshot: preview.png)

## Editing

To edit a custom block type, the editor can either double-tap on the block or click on the edit icon in the toolbar. The block drawer opens with the fields you've defined.

(screenshot: editing.png)

## Tabs

Like in the builder field, you can also define tabs for your blocks when they need a lot of settings

```yaml
fields:
  blocks:
    label: Text
    type: blocks
    fieldsets:
      - heading
      - text
      button:
        name: Button
        icon: bolt
        tabs:
          content:
            fields:
              link:
                type: url
              text:
                type: text
          styles:
            fields:
              class:
                type: text
              id:
                type: text
```

The tabs will then show up in the block drawer

(screenshot: tabs.png)

## Global block types

A more reusable way to store such a custom block type definition is in a folder called `site/blueprints/blocks`. In this case we would store it in `/site/blueprints/blocks/button.yml`:

```yaml
# /site/blueprints/blocks/button.yml
name: Button
icon: bolt
tabs:
  content:
    fields:
      link:
        type: url
      text:
        type: text
  styles:
    fields:
      class:
        type: text
      id:
        type: text
```

Now, we can use it in our fieldsets option for any blocks field.

```yaml
fields:
  blocks:
    type: blocks
    fieldsets:
      - heading
      - text
      - button
```

Of course, this also works in groups:

```yaml
fields:
  text:
    type: blocks
    fieldsets:
      text:
        label: Text
        type: group
        fieldsets:
          - heading
          - text
          - list
          - button
      media:
        label: Media
        type: group
        fieldsets:
          - image
          - video
      code:
        label: Code
        type: group
        fieldsets:
          - code
          - markdown
```

## Custom Block Type Snippet

To render the HTML for your custom block type, it needs a snippet in `site/snippets/blocks`. In this case we would create a file called `site/snippets/blocks/button.php`

```php
<a href="<?= $block->link() ?>" class="btn">
  <?= $block->text() ?>
</a>
```

## Visual block preview in the Panel

The default preview for custom blocks is nice, but it can be even better! You can create your own little Vue component to render a button preview directly in the blocks editor.

The easiest way to get started with block previews is a with a Vue component that only generates a bit of HTML for the block.

Create a new folder called `/site/plugins/button` and add an `index.php`, `index.css` and an `index.js`

### index.php

The `index.php` file is only there so far to tell Kirby the plugin exists. You can use it later to define a default blueprint and snippet for your block, but we leave this out for now.

```php "/site/plugins/button/index.php"
<?php

Kirby::plugin('your-project/button-block', []);
```

### index.js

The `index.js` file will be the place to register your Vue component for the Panel and create the template for your block. You can write it in simple vanilla JS, or you can go for a full-blown setup with build process to work with Vue single-file-components. We keep it simple for this example.

```js "/site/plugins/button/index.js"
panel.plugin("your-project/button-block", {
  blocks: {
    button: `
      <button type="button" @click="open">
        {{ content.text }}
      </button>
    `
  }
});
```

In its most simple form, the button block can be just an HTML template string that renders the block preview.

As you can see in the template above, there are a few things that don't look like vanilla JS and come from Vue.

With `@click="open"` we react to the click event of the button and call the open method that every block automatically has. This open method will then open the block drawer with the form fields you've defined in the blueprint for the block.

Every block also has access to a `content` object that has all the values for your fields. With `{{ content.text }}` we can render the value of the text field for your button. `{{ content.link }}` would print the URL.

### index.css

We can finally polish our preview with a little bit of CSS.

```css "/site/plugins/button/index.css"
.k-block-type-button button {
    border: 2px solid #000;
    display: inline-flex;
    border-radius: 3rem;
    padding: .25rem 1.5rem;
    cursor: pointer;
}
.k-block-type-button button:empty::after {
    content: "Button text …";
    color: var(--color-text-light);
}
.k-block-type-button button:focus {
    outline: 0;
    border-color: var(--color-focus);
}
```

Every block in the Panel will automatically have a class name that reflects the type (i.e. `k-block-type-button`, `k-block-type-heading`) Styling the content of the blocks is really easy that way. Of course you can add additional class names to elements inside your button previews as well for even better control.

### The final result

Instead of the generic preview, we will now see a much more visual representation of the button we are creating. Feel free to add your own styles and make that button even nicer.

(screenshot: custom-preview.png)

## WYISWYG editing

The button preview in the example above is static and will only change when you open the block drawer and start editing the fields.

If you want to go one step further, you can turn your button block into a tiny WYSIWYG editor with just a bit more work. Examples for such WYSIWYG editing blocks are our `text`, `heading`, `quote` or `code` blocks.

### Extending your index.js

```js "/site/plugins/button/index.js"
panel.plugin("your-project/button-block", {
  blocks: {
    button: `
      <input
        type="text"
        placeholder="Button text …"
        :value="content.text"
        @input="update({ text: $event.target.value })"
      />
    `
  }
});
```

See the magic happen …

(image: wysiwyg.gif class: screenshot)

Let's talk about the code a bit more. We use a regular HTML text input and put a little bit of Vue.js magic on top of it.

With `:value="content.text"` we can feed the value from the text field into our input. The : is Vue's syntax for passing non-string attribute values.

We listen to the `input` event of the input field by using Vue's `@input` event listener syntax.

Our block components have an update method, which we can use to tell the Blocks field that the block content has changed. The update method will merge the content object, with whatever we pass as argument.

With `{ text: 'Something' }` we can only update the text field of the block. With `$event.target.value`, we fetch the current value of the input field whenever the value changes.

The Blocks field will take care of the rest.
