Title: Extending core blocks

----

Intro: You can take our core blocks as a starting point for your own custom blocks and extend them with your own fields, snippets and previews.

----

Text:

Extending our core blocks is working the same way as extending fields, tabs, sections in blueprints everywhere else.

## Example: extending the heading block

Let's take the heading block and add a simple text field to add a custom ID for the heading

```yaml
fields:
  blocks:
  type: blocks
  fieldsets:
    heading:
      extends: blocks/heading
      fields:
        customId:
          label: Custom ID
          type: text
```

This will add the `customID` field below the default fields of the block.

(screenshot: custom-id.png)

## Extending existing fields

Instead of only adding new fields, you can also adjust the field settings for the default fields of the block.

Let's limit the number of heading levels for our heading block.

```yaml
fields:
  blocks:
  type: blocks
  fieldsets:
    heading:
      extends: blocks/heading
      fields:
        level:
          options:
            - h2
            - h3
```

You can find all block fields and their settings in the (link: v35/blocks/block-types text: docs for each block).

## Adding tabs

You can extend our core blocks with additional tabs. Be aware though that you need to recreate all default fields in this case, as tabs will replace the default fields.

```yaml
fields:
  blocks:
  type: blocks
  fieldsets:
    heading:
      extends: blocks/heading
      tabs:
        content:
          fields:
            level:
              type: select
              empty: false
              default: "h2"
              width: 1/6
              options:
                - h1
                - h2
                - h3
            text:
              type: writer
              inline: true
              width: 5/6
            customId:
              label: Custom ID
              type: text
        styles:
          fields:
            backgroundColor:
              type: select
              options:
                - red
                - green
                - blue
            textColor:
              type: select
              options:
                - white
                - black
```





## Replacing a core snippet

Kirby comes with default snippets for every core block to render HTML for them. If you are not happy with the results, you can replace those snippets with your own code.

Block snippets live in `/site/snippets/blocks`

To replace the heading snippet and place your new custom ID, you should create a new PHP file called `/site/snippets/blocks/heading.php`

### The default heading snippet

```php
<<?= $level = $block->level()->or('h2') ?>>
  <?= $block->text() ?>
</<?= $level ?>>
```

### Customized version

```php "/site/snippets/blocks/heading.php"
<<?= $level = $block->level()->or('h2') ?> id="<?= $block->customId()->or($block->id()) ?>">
  <?= $block->text() ?>
</<?= $level ?>>
```

## Replacing core block previews

We provide previews for all our core blocks. You can overwrite them in the same way that you would (link: v35/blocks/custom-blocks#visual-block-preview-in-the-panel text: create a custom preview for your own blocks).

You only need to choose the same name for your plugin:

```php "/site/plugins/heading/index.php"
<?php

Kirby::plugin('your-name/custom-heading', []);
```

```js "/site/plugins/heading/index.js"
panel.plugin("your-name/custom-heading", {
  blocks: {
    heading: {
      template: `
        <div :data-level="content.level" class="k-block-type-heading-input">
          <k-writer
            ref="input"
            :style="{
              backgroundColor: content.backgroundcolor,
              color: content.textcolor
            }"
            :inline="true"
            :value="content.text"
            @input="update({ text: $event })"
          />
        </div>
      `
    }
  }
});
```
(image: preview.gif class: screenshot)

<info>
Kirby converts all field names internally to lowercase. That's why backgroundColor and textColor turn into backgroundcolor and textcolor in your JS code.
</info>
