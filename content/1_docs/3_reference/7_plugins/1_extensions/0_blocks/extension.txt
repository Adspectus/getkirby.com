Title: Blocks

----

Intro:

----

Text:

The default preview for custom blocks is nice, but it can be even better! You can create your own Vue component to render previews for your blocks directly in the blocks editor. You can even make them editable.

## Simple preview

The easiest way to get started with block previews is a with a Vue component that only generates a bit of HTML for the block.

Let's use a custom call to action button block as example for this plugin guide:

```yaml
fields:
  blocks:
    type: blocks
    fieldsets:
      - heading
      - text
      button:
        name: Button
        icon: bolt
        fields:
          link:
            type: url
          text:
            type: text
```

By default, such custom blocks will all use a generic block preview including the defined icon and the name of the block.

(screenshot: editing.png)

### Plugin setup

Create a new folder called `/site/plugins/button` and add an `index.php`, `index.css` and an `index.js`

### index.php

The `index.php` file is only there so far to tell Kirby the plugin exists. You can use it later to define a default blueprint and snippet for your block, but we leave this out for now.

```php "/site/plugins/button/index.php"
<?php

Kirby::plugin('your-project/button-block', []);
```

### index.js

The `index.js` file will be the place to register your Vue component for the Panel and create the template for your block. You can write it in simple vanilla JS, or you can go for a full-blown setup with build process to work with Vue single-file-components. We keep it simple for this example.

```js "/site/plugins/button/index.js"
panel.plugin("your-project/button-block", {
  blocks: {
    button: `
      <button type="button" @click="open">
        {{ content.text }}
      </button>
    `
  }
});
```

In its most simple form, the button block can be just an HTML template string that renders the block preview.

As you can see in the template above, there are a few things that don't look like vanilla JS and come from Vue.

With `@click="open"` we react to the click event of the button and call the open method that every block automatically has. This open method will then open the block drawer with the form fields you've defined in the blueprint for the block.

Every block also has access to a `content` object that has all the values for your fields. With `{{ content.text }}` we can render the value of the text field for your button. `{{ content.link }}` would print the URL.

### index.css

We can finally polish our preview with a little bit of CSS.

```css "/site/plugins/button/index.css"
.k-block-type-button button {
    border: 2px solid #000;
    display: inline-flex;
    border-radius: 3rem;
    padding: .25rem 1.5rem;
    cursor: pointer;
}
.k-block-type-button button:empty::after {
    content: "Button text …";
    color: var(--color-text-light);
}
.k-block-type-button button:focus {
    outline: 0;
    border-color: var(--color-focus);
}
```

Every block in the Panel will automatically have a class name that reflects the type (i.e. `k-block-type-button`, `k-block-type-heading`) Styling the content of the blocks is really easy that way. Of course you can add additional class names to elements inside your button previews as well for even better control.

### The final result

Instead of the generic preview, we will now see a much more visual representation of the button we are creating. Feel free to add your own styles and make that button even nicer.

(screenshot: custom-preview.png)

## WYISWYG editing

The button preview in the example above is static and will only change when you open the block drawer and start editing the fields.

If you want to go one step further, you can turn your button block into a tiny WYSIWYG editor with just a bit more work. Examples for such WYSIWYG editing blocks are our `text`, `heading`, `quote` or `code` blocks.

### Extending your index.js

```js "/site/plugins/button/index.js"
panel.plugin("your-project/button-block", {
  blocks: {
    button: `
      <input
        type="text"
        placeholder="Button text …"
        :value="content.text"
        @input="update({ text: $event.target.value })"
      />
    `
  }
});
```

See the magic happen …

(image: wysiwyg.gif class: screenshot)

Let's talk about the code a bit more. We use a regular HTML text input and put a little bit of Vue.js magic on top of it.

With `:value="content.text"` we can feed the value from the text field into our input. The : is Vue's syntax for passing non-string attribute values.

We listen to the `input` event of the input field by using Vue's `@input` event listener syntax.

Our block components have an update method, which we can use to tell the Blocks field that the block content has changed. The update method will merge the content object, with whatever we pass as argument.

With `{ text: 'Something' }` we can only update the text field of the block. With `$event.target.value`, we fetch the current value of the input field whenever the value changes.

The Blocks field will take care of the rest.

### Full Vue component

When your preview gets more complex, you probably need computed values or methods that are normally available in Vue components. The examples above just focused on the template code, but you can extend this to a full Vue component:

```js "/site/plugins/button/index.js"
panel.plugin("your-project/button-block", {
  blocks: {
    button: {
      computed: {
        placeholder() {
          return "Button text …";
        }
      },
      template: `
        <input
          type="text"
          :placeholder="placeholder"
          :value="content.text"
          @input="update({ text: $event.target.value })"
        />
      `
    }
  }
});
```

### Adjusting the index.css

To wrap this up, we need to adjust our CSS file a bit to make it work with the input element instead of the button.

```css
.k-block-type-button input {
    border: 2px solid #000;
    border-radius: 3rem;
    padding: .25rem .75rem;
    cursor: pointer;
    font: inherit;
    text-align: center;
}
.k-block-type-button input:focus {
    outline: 0;
    border-color: var(--color-focus);
}
```

## Single file components

All examples above are written in plain JS. You don't need a build process to create such preview plugins. But if you want to go further and use Vue's brilliant single file components, you would need to look into our (link: docs/guide/plugins/plugin-setup-panel text: pluginkit) for Panel plugins that comes with a full build process and parses Vue single file components. You can switch the example above to a single file component in no time:

```html "/site/plugins/button/components/Button.vue"
<template>
  <input
    type="text"
    :placeholder="placeholder"
    :value="content.text"
    @input="update({ text: $event.target.value })"
  />
</template>

<script>
export default {
  computed: {
    placeholder() {
      return "Button text …";
    }
  }
};
</script>

<style>
.k-block-type-button input {
    border: 2px solid #000;
    border-radius: 3rem;
    padding: .25rem .75rem;
    cursor: pointer;
    font: inherit;
    text-align: center;
}
.k-block-type-button input:focus {
    outline: 0;
    border-color: var(--color-focus);
}
</style>
```

```js "/site/plugins/button/index.js"
import Button from "./components/Button.vue";

panel.plugin("your-project/button-block", {
  blocks: Button
});
```

<info>
When using single file components, you store your CSS directly with the component. You can get rid of the index.css in that case.
</info>

## Full block plugins

So far, we've created a preview plugin for a custom block that we defined in our blueprints. We can extend our plugin even more to include the blueprint definition and snippet to share as stand-alone blocks with other projects or Kirby users.

### Adding a default blueprint and snippet

As a first step you need to reference the custom snippet and blueprint in the index.php of your plugin.

```php "/site/plugins/button/index.php"
<?php

Kirby::plugin('your-project/button-block', [
  'blueprints' => [
    'blocks/button' => __DIR__ . '/blueprints/button.yml'
  ],
  'snippets' => [
    'blocks/button' => __DIR__ . '/snippets/button.php'
  ]
]);
```

### Blueprint

```yaml "/site/plugins/button/blueprints/button.yml"
name: Button
icon: bolt
fields:
  link:
    type: url
  text:
    type: text
```

### Snippet

```php "/site/plugins/button/snippets/button.php"
<a class="btn" href="<?= $block->link()->toUrl() ?>">
  <?= $block->text()->html() ?>
</a>
```
